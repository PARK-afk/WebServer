server {	
	listen 8003
	server_name localhost

	path  /Users/seongwol/Documents/github/webserv/html/8080

	index index.html
	client_max_body_size 10000000000
	error_pages /error_pages

	location /at {
		allow_methods GET POST DELETE
		root /at
		autoindex on
	}

	location /css {
		allow_methods GET
		root /css
	}

	
	location /upload {
		cgi_pass /cgi
		allow_methods GET POST DELETE
		index CGI.py
		upload_path /at
	}

	location ~ \.py$ {
		allow_methods GET
		cgi_pass /cgi
	}

	location /ground2.png {
		allow_methods GET
		root /images
	}

	location ~ \.png$ {
		allow_methods GET
		root /images
	}

	location /features {
		autoindex on
		allow_methods GET POST
		root /features
		index features.html
	}

	location ~ \.js$ {
		allow_methods GET
		root /error_pages
	}

	location /calculator {
		allow_methods GET
		root /calculator
		index calculator.html
	}

	

	location /redirection {
		allow_methods GET
		return 302 https://www.google.com
	}

	location / {
		allow_methods GET
		index index.html
		autoindex on
		# return 302 https://www.google.com
	}
						# map<std::str9j, location>
}

server {
	listen 8888
	server_name 127.0.0.1

	path /Users/parkjunseo/42/webserv/html/8888
	index index.html
	client_max_body_size 10

	location / {
		allow_methods GET
		root /
		try_files $uri $uri/ =404
	}
}

# Choose the port and host of each ’server’.
# • Setup the server_names or not.
# • The first server for a host:port will be the default for this host:port (that means
# it will answer to all the requests that don’t belong to an other server).
# • Setup default error pages.
# • Limit client body size.
# • Setup routes with one or multiple of the following rules/configuration (routes wont
# be using regexp):
# ◦ Define a list of accepted HTTP methods for the route.
# ◦ Define a HTTP redirection.
# ◦ Define a directory or a file from where the file should be searched (for example,
# if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is
# /tmp/www/pouic/toto/pouet).
# ◦ Turn on or off directory listing.
# 7
# Webserv This is when you finally understand why a URL starts with HTTP
# ◦ Set a default file to answer if the request is a directory.
# ◦ Execute CGI based on certain file extension (for example .php).
# ◦ Make it work with POST and GET methods.
# ◦ Make the route able to accept uploaded files and configure where they should
# be saved.
